{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar react_1 = require(\"react\");\nvar useRafState_1 = tslib_1.__importDefault(require(\"./useRafState\"));\nvar util_1 = require(\"./misc/util\");\nvar useWindowSize = function (_a) {\n  var _b = _a === void 0 ? {} : _a,\n    _c = _b.initialWidth,\n    initialWidth = _c === void 0 ? Infinity : _c,\n    _d = _b.initialHeight,\n    initialHeight = _d === void 0 ? Infinity : _d,\n    onChange = _b.onChange;\n  // Use the useRafState hook to maintain the current window size (width and height)\n  var _e = useRafState_1.default({\n      width: util_1.isBrowser ? window.innerWidth : initialWidth,\n      height: util_1.isBrowser ? window.innerHeight : initialHeight\n    }),\n    state = _e[0],\n    setState = _e[1];\n  react_1.useEffect(function () {\n    // Only run the effect on the browser (to avoid issues with SSR)\n    if (util_1.isBrowser) {\n      var handler_1 = function () {\n        var width = window.innerWidth;\n        var height = window.innerHeight;\n        // Update the state with the new window size\n        setState({\n          width: width,\n          height: height\n        });\n        // If an onChange callback is provided, call it with the new dimensions\n        if (onChange) onChange(width, height);\n      };\n      // Add event listener for the resize event\n      util_1.on(window, 'resize', handler_1);\n      // Cleanup function to remove the event listener when the component is unmounted (it's for performance optimization)\n      return function () {\n        util_1.off(window, 'resize', handler_1);\n      };\n    }\n  }, []);\n  // Return the current window size (width and height)\n  return state;\n};\nexports.default = useWindowSize;","map":{"version":3,"names":["Object","defineProperty","exports","value","tslib_1","require","react_1","useRafState_1","__importDefault","util_1","useWindowSize","_a","_b","_c","initialWidth","Infinity","_d","initialHeight","onChange","_e","default","width","isBrowser","window","innerWidth","height","innerHeight","state","setState","useEffect","handler_1","on","off"],"sources":["C:/Users/LapTopUSA/CascadeProjects/speed-reading-trainer/node_modules/react-use/lib/useWindowSize.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar react_1 = require(\"react\");\nvar useRafState_1 = tslib_1.__importDefault(require(\"./useRafState\"));\nvar util_1 = require(\"./misc/util\");\nvar useWindowSize = function (_a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.initialWidth, initialWidth = _c === void 0 ? Infinity : _c, _d = _b.initialHeight, initialHeight = _d === void 0 ? Infinity : _d, onChange = _b.onChange;\n    // Use the useRafState hook to maintain the current window size (width and height)\n    var _e = useRafState_1.default({\n        width: util_1.isBrowser ? window.innerWidth : initialWidth,\n        height: util_1.isBrowser ? window.innerHeight : initialHeight,\n    }), state = _e[0], setState = _e[1];\n    react_1.useEffect(function () {\n        // Only run the effect on the browser (to avoid issues with SSR)\n        if (util_1.isBrowser) {\n            var handler_1 = function () {\n                var width = window.innerWidth;\n                var height = window.innerHeight;\n                // Update the state with the new window size\n                setState({\n                    width: width,\n                    height: height,\n                });\n                // If an onChange callback is provided, call it with the new dimensions\n                if (onChange)\n                    onChange(width, height);\n            };\n            // Add event listener for the resize event\n            util_1.on(window, 'resize', handler_1);\n            // Cleanup function to remove the event listener when the component is unmounted (it's for performance optimization)\n            return function () {\n                util_1.off(window, 'resize', handler_1);\n            };\n        }\n    }, []);\n    // Return the current window size (width and height)\n    return state;\n};\nexports.default = useWindowSize;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,OAAO,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC9B,IAAIC,OAAO,GAAGD,OAAO,CAAC,OAAO,CAAC;AAC9B,IAAIE,aAAa,GAAGH,OAAO,CAACI,eAAe,CAACH,OAAO,CAAC,eAAe,CAAC,CAAC;AACrE,IAAII,MAAM,GAAGJ,OAAO,CAAC,aAAa,CAAC;AACnC,IAAIK,aAAa,GAAG,SAAAA,CAAUC,EAAE,EAAE;EAC9B,IAAIC,EAAE,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,EAAE;IAAEE,EAAE,GAAGD,EAAE,CAACE,YAAY;IAAEA,YAAY,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAGE,QAAQ,GAAGF,EAAE;IAAEG,EAAE,GAAGJ,EAAE,CAACK,aAAa;IAAEA,aAAa,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAGD,QAAQ,GAAGC,EAAE;IAAEE,QAAQ,GAAGN,EAAE,CAACM,QAAQ;EAClM;EACA,IAAIC,EAAE,GAAGZ,aAAa,CAACa,OAAO,CAAC;MAC3BC,KAAK,EAAEZ,MAAM,CAACa,SAAS,GAAGC,MAAM,CAACC,UAAU,GAAGV,YAAY;MAC1DW,MAAM,EAAEhB,MAAM,CAACa,SAAS,GAAGC,MAAM,CAACG,WAAW,GAAGT;IACpD,CAAC,CAAC;IAAEU,KAAK,GAAGR,EAAE,CAAC,CAAC,CAAC;IAAES,QAAQ,GAAGT,EAAE,CAAC,CAAC,CAAC;EACnCb,OAAO,CAACuB,SAAS,CAAC,YAAY;IAC1B;IACA,IAAIpB,MAAM,CAACa,SAAS,EAAE;MAClB,IAAIQ,SAAS,GAAG,SAAAA,CAAA,EAAY;QACxB,IAAIT,KAAK,GAAGE,MAAM,CAACC,UAAU;QAC7B,IAAIC,MAAM,GAAGF,MAAM,CAACG,WAAW;QAC/B;QACAE,QAAQ,CAAC;UACLP,KAAK,EAAEA,KAAK;UACZI,MAAM,EAAEA;QACZ,CAAC,CAAC;QACF;QACA,IAAIP,QAAQ,EACRA,QAAQ,CAACG,KAAK,EAAEI,MAAM,CAAC;MAC/B,CAAC;MACD;MACAhB,MAAM,CAACsB,EAAE,CAACR,MAAM,EAAE,QAAQ,EAAEO,SAAS,CAAC;MACtC;MACA,OAAO,YAAY;QACfrB,MAAM,CAACuB,GAAG,CAACT,MAAM,EAAE,QAAQ,EAAEO,SAAS,CAAC;MAC3C,CAAC;IACL;EACJ,CAAC,EAAE,EAAE,CAAC;EACN;EACA,OAAOH,KAAK;AAChB,CAAC;AACDzB,OAAO,CAACkB,OAAO,GAAGV,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}