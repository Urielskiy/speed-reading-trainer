{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LapTopUSA\\\\CascadeProjects\\\\speed-reading-trainer\\\\src\\\\context\\\\SettingsContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultSettings = {\n  wordsPerMinute: 200,\n  fontSize: 24,\n  wordsAtOnce: 1,\n  theme: 'light',\n  font: 'Roboto',\n  mode: 'normal',\n  showFixationPoint: true\n};\nconst defaultStatistics = {\n  totalSessions: 0,\n  averageSpeed: 0,\n  totalWordsRead: 0,\n  lastSession: null\n};\nexport const SettingsContext = /*#__PURE__*/createContext(undefined);\nexport const SettingsProvider = ({\n  children\n}) => {\n  _s();\n  const [settings, setSettings] = useState(defaultSettings);\n  const [statistics, setStatistics] = useState(defaultStatistics);\n  const updateSettings = newSettings => {\n    setSettings(prev => ({\n      ...prev,\n      ...newSettings\n    }));\n  };\n  const updateStatistics = sessionData => {\n    setStatistics(prev => {\n      const totalSessions = prev.totalSessions + 1;\n      const newAverageSpeed = (prev.averageSpeed * prev.totalSessions + sessionData.speed) / totalSessions;\n      return {\n        totalSessions,\n        averageSpeed: Math.round(newAverageSpeed),\n        totalWordsRead: prev.totalWordsRead + Math.round(sessionData.speed * (sessionData.accuracy / 100)),\n        lastSession: {\n          date: new Date().toISOString(),\n          speed: sessionData.speed,\n          accuracy: sessionData.accuracy\n        }\n      };\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: {\n      settings,\n      updateSettings,\n      statistics,\n      updateStatistics\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(SettingsProvider, \"BF3/mJnYNl7cSlspsIkfqYjfFEE=\");\n_c = SettingsProvider;\nexport const useSettings = () => {\n  _s2();\n  const context = useContext(SettingsContext);\n  if (context === undefined) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n};\n_s2(useSettings, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","defaultSettings","wordsPerMinute","fontSize","wordsAtOnce","theme","font","mode","showFixationPoint","defaultStatistics","totalSessions","averageSpeed","totalWordsRead","lastSession","SettingsContext","undefined","SettingsProvider","children","_s","settings","setSettings","statistics","setStatistics","updateSettings","newSettings","prev","updateStatistics","sessionData","newAverageSpeed","speed","Math","round","accuracy","date","Date","toISOString","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSettings","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/LapTopUSA/CascadeProjects/speed-reading-trainer/src/context/SettingsContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\n\ninterface Settings {\n  wordsPerMinute: number;\n  fontSize: number;\n  wordsAtOnce: number;\n  theme: 'light' | 'dark';\n  font: string;\n  mode: 'normal' | 'sprint' | 'marathon';\n  showFixationPoint: boolean;\n}\n\ninterface SettingsContextType {\n  settings: Settings;\n  updateSettings: (newSettings: Partial<Settings>) => void;\n  statistics: {\n    totalSessions: number;\n    averageSpeed: number;\n    totalWordsRead: number;\n    lastSession: {\n      date: string;\n      speed: number;\n      accuracy: number;\n    } | null;\n  };\n  updateStatistics: (sessionData: { speed: number; accuracy: number }) => void;\n}\n\nconst defaultSettings: Settings = {\n  wordsPerMinute: 200,\n  fontSize: 24,\n  wordsAtOnce: 1,\n  theme: 'light',\n  font: 'Roboto',\n  mode: 'normal',\n  showFixationPoint: true,\n};\n\nconst defaultStatistics = {\n  totalSessions: 0,\n  averageSpeed: 0,\n  totalWordsRead: 0,\n  lastSession: null,\n};\n\nexport const SettingsContext = createContext<SettingsContextType | undefined>(undefined);\n\nexport const SettingsProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [settings, setSettings] = useState<Settings>(defaultSettings);\n  const [statistics, setStatistics] = useState(defaultStatistics);\n\n  const updateSettings = (newSettings: Partial<Settings>) => {\n    setSettings(prev => ({ ...prev, ...newSettings }));\n  };\n\n  const updateStatistics = (sessionData: { speed: number; accuracy: number }) => {\n    setStatistics(prev => {\n      const totalSessions = prev.totalSessions + 1;\n      const newAverageSpeed = \n        (prev.averageSpeed * prev.totalSessions + sessionData.speed) / totalSessions;\n      \n      return {\n        totalSessions,\n        averageSpeed: Math.round(newAverageSpeed),\n        totalWordsRead: prev.totalWordsRead + Math.round(sessionData.speed * (sessionData.accuracy / 100)),\n        lastSession: {\n          date: new Date().toISOString(),\n          speed: sessionData.speed,\n          accuracy: sessionData.accuracy,\n        },\n      };\n    });\n  };\n\n  return (\n    <SettingsContext.Provider value={{ settings, updateSettings, statistics, updateStatistics }}>\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n\nexport const useSettings = () => {\n  const context = useContext(SettingsContext);\n  if (context === undefined) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AA4B9E,MAAMC,eAAyB,GAAG;EAChCC,cAAc,EAAE,GAAG;EACnBC,QAAQ,EAAE,EAAE;EACZC,WAAW,EAAE,CAAC;EACdC,KAAK,EAAE,OAAO;EACdC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,iBAAiB,EAAE;AACrB,CAAC;AAED,MAAMC,iBAAiB,GAAG;EACxBC,aAAa,EAAE,CAAC;EAChBC,YAAY,EAAE,CAAC;EACfC,cAAc,EAAE,CAAC;EACjBC,WAAW,EAAE;AACf,CAAC;AAED,OAAO,MAAMC,eAAe,gBAAGlB,aAAa,CAAkCmB,SAAS,CAAC;AAExF,OAAO,MAAMC,gBAAmD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAWG,eAAe,CAAC;EACnE,MAAM,CAACoB,UAAU,EAAEC,aAAa,CAAC,GAAGxB,QAAQ,CAACW,iBAAiB,CAAC;EAE/D,MAAMc,cAAc,GAAIC,WAA8B,IAAK;IACzDJ,WAAW,CAACK,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE,GAAGD;IAAY,CAAC,CAAC,CAAC;EACpD,CAAC;EAED,MAAME,gBAAgB,GAAIC,WAAgD,IAAK;IAC7EL,aAAa,CAACG,IAAI,IAAI;MACpB,MAAMf,aAAa,GAAGe,IAAI,CAACf,aAAa,GAAG,CAAC;MAC5C,MAAMkB,eAAe,GACnB,CAACH,IAAI,CAACd,YAAY,GAAGc,IAAI,CAACf,aAAa,GAAGiB,WAAW,CAACE,KAAK,IAAInB,aAAa;MAE9E,OAAO;QACLA,aAAa;QACbC,YAAY,EAAEmB,IAAI,CAACC,KAAK,CAACH,eAAe,CAAC;QACzChB,cAAc,EAAEa,IAAI,CAACb,cAAc,GAAGkB,IAAI,CAACC,KAAK,CAACJ,WAAW,CAACE,KAAK,IAAIF,WAAW,CAACK,QAAQ,GAAG,GAAG,CAAC,CAAC;QAClGnB,WAAW,EAAE;UACXoB,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;UAC9BN,KAAK,EAAEF,WAAW,CAACE,KAAK;UACxBG,QAAQ,EAAEL,WAAW,CAACK;QACxB;MACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAED,oBACEhC,OAAA,CAACc,eAAe,CAACsB,QAAQ;IAACC,KAAK,EAAE;MAAElB,QAAQ;MAAEI,cAAc;MAAEF,UAAU;MAAEK;IAAiB,CAAE;IAAAT,QAAA,EACzFA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACvB,EAAA,CAhCWF,gBAAmD;AAAA0B,EAAA,GAAnD1B,gBAAmD;AAkChE,OAAO,MAAM2B,WAAW,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC/B,MAAMC,OAAO,GAAGhD,UAAU,CAACiB,eAAe,CAAC;EAC3C,IAAI+B,OAAO,KAAK9B,SAAS,EAAE;IACzB,MAAM,IAAI+B,KAAK,CAAC,oDAAoD,CAAC;EACvE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,WAAW;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}